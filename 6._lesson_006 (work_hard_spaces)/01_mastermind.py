# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названом числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названом числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

import game_engine
import colorama


def output_result(item, hidden_number, motion):
    """Выводит итог игры
    Если игрок победил - поздравления, если нет, то просто прощание."""
    if item == 'Win':
        print('Поздравляю!!! Вы выиграли в этой не лёгкой игре с хорошим результатом!\n'
              'ИТОГИ ИГРЫ:\n'
              'Количество затраченных ходов: ' + colorama.Fore.RED, motion, colorama.Style.RESET_ALL)
    elif item == 'closed':
        print('Вы выбрали выход из игры! Игра завершена.\n'
              'Жаль, что вы не отгадали число!\n'
              'ИТОГИ ИГРЫ:\n'
              'Загаданное число: ', hidden_number, '\n'
                                                   'Количество ходов: ', motion)


def rules():
    """Выводит правила игры на экран!"""
    print("Расскажем немного о нашей игре!\n"
          "Компьютер загадывает четырёхзначное число, а игрок должен его отгадать.\n"
          "Игрок называет четырёхзначное число начинающееся не с \"0\" и не имеющее повторяющихся знаков,\n"
          "компьютер сверяет результат с загаданным числом.\n"
          "компьютер сообщают о количестве «быков» и «коров» в названом числе\n"
          "«бык» — цифра есть в записи задуманного числа и стоит в той же позиции,\n"
          "      что и в задуманном числе\n"
          "«корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,\n"
          "      что и в задуманном числе.\n"
          "Победа оглашается когда игрок получил четыре \"быка\"\n\n")


def main():
    rules()
    print(colorama.Fore.GREEN + 'Игра началась!!!'.center(100, '_').upper(), '\n' + colorama.Style.RESET_ALL)
    hidden_number = game_engine.create_number()
    print('Итак, компьютер загадал число, начинаем его отгадывать!\n')
    player = None
    motion = 1
    while player not in ("Win", 'closed'):
        number = game_engine.request_number()
        results = game_engine.check_number(hidden_number=hidden_number, number=str(number))
        if number == 1111:
            player = 'closed'
            break
        for i, j in results.items():
            print(f'{i} - {j}')
        if hidden_number == str(number):
            player = 'Win'
            output_result(player, hidden_number, motion)
            value = None
            while value not in ('да', 'нет', 'lf', 'ytn'):
                value = input('Хотите сыграть ещё (да, нет)?: ')
                if value in ('да', 'lf'):
                    player = None
                    hidden_number = game_engine.create_number()
                    motion = 0
                elif value == '':
                    print('Напечатайте пару букв!)')
                    value = None
                else:
                    print('Как хотите! До свидания!')
                    value = 'нет'
        else:
            motion += 1


if __name__ == '__main__':
    main()
