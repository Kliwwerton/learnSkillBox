# -*- coding: utf-8 -*-

import Bools_and_Cows_engine
# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число с неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названом числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названом числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чат-бот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


def main():
    Bools_and_Cows_engine.rules_of_the_game()
    while True:
        numbers = Bools_and_Cows_engine.create_numbers()
        # print(numbers)
        count = 1
        while True:
            user_numbers = Bools_and_Cows_engine.create_user_number()
            if isinstance(user_numbers, str):
                count = 0
                break
            elif isinstance(user_numbers, list):
                bools_and_cows = Bools_and_Cows_engine.access_number_and_check(computer_number=numbers,
                                                                               user_number=user_numbers)
            else:
                print('Что за херня!!! ИГРА ОКОНЧЕНА!!!')
                count = 0
                break
            if Bools_and_Cows_engine.defines_is_win(bools_and_cows, count=count):
                break
            count += 1

        if count == 0:
            break
        elif Bools_and_Cows_engine.is_game():
            continue
        else:
            break


if __name__ == '__main__':
    main()
